import org.gradle.jvm.toolchain.internal.DefaultToolchainSpec

SourceSet forgePatchesSet

sourceSets {
    create("util") {
        java {
        }
    }
    forgePatchesSet = create("forgePatches") {
        java {
            compileClasspath += mcpTasks.patchedMcSources.output
            compileClasspath += mcpTasks.patchedConfiguration
        }
    }
    named("main").configure {
        java {
            srcDirs += ["src/generated/java"]
        }
    }
}

dependencies {
    utilImplementation("org.ow2.asm:asm:9.4")
    utilImplementation("org.ow2.asm:asm-tree:9.4")
    utilImplementation("org.apache.commons:commons-lang3:3.12.0")
    utilImplementation("commons-io:commons-io:2.11.0")
    utilImplementation("commons-collections:commons-collections:3.2.2")
    utilImplementation("com.google.guava:guava:31.1-jre")

    forgePatchesImplementation("org.apache.commons:commons-compress:1.21")
}

tasks.register(forgePatchesSet.jarTaskName, Jar) {
    from(forgePatchesSet.output)
    def resolvable = configurations.detachedConfiguration(dependencies.create("org.apache.commons:commons-compress:1.21"))
    // Bootleg shadow jar
    resolvable.resolve().each {dep ->
        from(zipTree(dep))
    }
    archiveClassifier.set("forgePatches")
    archiveVersion.set("1.0") // TODO
}

tasks.named("assemble").configure {
    dependsOn(forgePatchesSet.jarTaskName)
}

tasks.register("runComparisonTool", JavaExec) {
    classpath(sourceSets.util.runtimeClasspath)
    dependsOn("jar")
    mainClass.set("me.eigenraven.lwjgl3ify.ComparisonTool")
    minHeapSize = "2G"
    maxHeapSize = "2G"
}

afterEvaluate {
    tasks.named("relocateShadowJar").configure {
        enabled = false
    }
}

afterEvaluate {
    def lwjgl2Zips = configurations.named("lwjglMcCompileClasspath").get().resolve().findAll {!it.name.contains("natives") && !it.path.contains("net.java.j")}
    def lwjgl3Zips = configurations.named("lwjglModClasspath").get().resolve().findAll {!it.name.contains("natives")}
    def lwjgl2Args = lwjgl2Zips.collect {"--2:" + it}
    def lwjgl3Args = lwjgl3Zips.collect {"--3:" + it}
    def allArgs = lwjgl2Args + lwjgl3Args + ["--M:" + tasks.jar.archiveFile.get().asFile.path]
    tasks.named("runComparisonTool", JavaExec).configure {
        args(allArgs)
    }
}

def newJavaToolchainSpec = new DefaultToolchainSpec(objects)
newJavaToolchainSpec.vendor.set(JvmVendorSpec.ADOPTIUM)
newJavaToolchainSpec.languageVersion.set(JavaLanguageVersion.of(17))
def newJavaLauncher = javaToolchains.launcherFor(newJavaToolchainSpec)

for (runTask in ["runClient", "runServer", "runObfClient", "runObfServer"]) {
    tasks.named(runTask, JavaExec).configure {
        classpath = forgePatchesSet.output + classpath
        javaLauncher.set(newJavaLauncher)
        jvmArgs(
            "--illegal-access=warn",
            "--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
            "--add-opens", "java.base/java.net=ALL-UNNAMED",
            "--add-opens", "java.base/java.nio=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/java.text=ALL-UNNAMED",
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED"
        )
    }
}
