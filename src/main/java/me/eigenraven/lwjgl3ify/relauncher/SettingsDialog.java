package me.eigenraven.lwjgl3ify.relauncher;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Locale;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

public class SettingsDialog {

    public JComboBox<String> comboJavaExecutable;
    public JButton buttonRefreshJavas;
    public JTextPane warningLowerTheMemoryTextPane;
    public JButton buttonAddJava;
    public JTabbedPane tabbedPane1;
    public JSlider optMinMemory;
    public JComboBox<RelauncherConfig.GCOption> optGC;
    public JTextPane optCustom;
    public JButton buttonRun;
    public JCheckBox optHideOnFutureLaunches;
    public JCheckBox optRfbDumpClasses;
    public JCheckBox optRfbDumpTransformers;
    public JCheckBox optDebugAgent;
    public JCheckBox optDebugSuspend;
    public JCheckBox optForwardLogs;
    public JSlider optMaxMemory;
    public JCheckBox optMixinDebug;
    public JCheckBox optMixinExport;
    public JCheckBox optMixinCount;
    public JCheckBox optFmlDebugAts;
    public JPanel rootPanel;

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
     * code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(spacer1, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Lwjgl3ify Modern Java Relaunch Settings");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 5;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Java Executable: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        rootPanel.add(label2, gbc);
        comboJavaExecutable = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(comboJavaExecutable, gbc);
        buttonRefreshJavas = new JButton();
        buttonRefreshJavas.setText("Refresh");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(buttonRefreshJavas, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(spacer2, gbc);
        warningLowerTheMemoryTextPane = new JTextPane();
        warningLowerTheMemoryTextPane.setEditable(false);
        warningLowerTheMemoryTextPane.setEnabled(true);
        Font warningLowerTheMemoryTextPaneFont = this
            .$$$getFont$$$(null, Font.BOLD, -1, warningLowerTheMemoryTextPane.getFont());
        if (warningLowerTheMemoryTextPaneFont != null)
            warningLowerTheMemoryTextPane.setFont(warningLowerTheMemoryTextPaneFont);
        warningLowerTheMemoryTextPane.setText(
            "Warning: Lower the memory assigned to Java in your launcher below 1GB to avoid \"Out of memory\" crashes when relaunching the game. Currently");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(warningLowerTheMemoryTextPane, gbc);
        buttonAddJava = new JButton();
        buttonAddJava.setText("Add");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(buttonAddJava, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Minimum Java required by your mods: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        rootPanel.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Java options: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        rootPanel.add(label4, gbc);
        tabbedPane1 = new JTabbedPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.gridwidth = 3;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        rootPanel.add(tabbedPane1, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        tabbedPane1.addTab("Basic", panel1);
        panel1.setBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                null,
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                null));
        final JLabel label5 = new JLabel();
        label5.setText("Min memory [MB]");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label5, gbc);
        optMinMemory = new JSlider();
        optMinMemory.setMajorTickSpacing(1024);
        optMinMemory.setMaximum(8192);
        optMinMemory.setMinorTickSpacing(256);
        optMinMemory.setPaintLabels(true);
        optMinMemory.setPaintTicks(true);
        optMinMemory.setSnapToTicks(true);
        optMinMemory.setValueIsAdjusting(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(optMinMemory, gbc);
        final JLabel label6 = new JLabel();
        label6.setText("Max memory [MB]");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label6, gbc);
        optMaxMemory = new JSlider();
        optMaxMemory.setMajorTickSpacing(1024);
        optMaxMemory.setMaximum(8192);
        optMaxMemory.setMinorTickSpacing(256);
        optMaxMemory.setPaintLabels(true);
        optMaxMemory.setPaintTicks(true);
        optMaxMemory.setSnapToTicks(true);
        optMaxMemory.setValueIsAdjusting(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(optMaxMemory, gbc);
        final JLabel label7 = new JLabel();
        label7.setText("Garbage collector");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        panel1.add(label7, gbc);
        optGC = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(optGC, gbc);
        final JLabel label8 = new JLabel();
        label8.setText("Custom options (1 per line)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(label8, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(4, 4, 4, 4);
        panel1.add(scrollPane1, gbc);
        optCustom = new JTextPane();
        optCustom.setMinimumSize(new Dimension(256, 128));
        scrollPane1.setViewportView(optCustom);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        tabbedPane1.addTab("Advanced", panel2);
        panel2.setBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                null,
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                null));
        optRfbDumpClasses = new JCheckBox();
        optRfbDumpClasses.setText("RFB: Dump loaded classes");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optRfbDumpClasses, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel2.add(spacer4, gbc);
        optRfbDumpTransformers = new JCheckBox();
        optRfbDumpTransformers.setText("RFB: Dump classes per transformer");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optRfbDumpTransformers, gbc);
        optDebugAgent = new JCheckBox();
        optDebugAgent.setText("Allow attaching a debugger");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optDebugAgent, gbc);
        optDebugSuspend = new JCheckBox();
        optDebugSuspend.setText("Wait for debugger");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optDebugSuspend, gbc);
        optForwardLogs = new JCheckBox();
        optForwardLogs.setSelected(true);
        optForwardLogs.setText("Forward logs to the parent launcher (uses more memory)");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optForwardLogs, gbc);
        optMixinExport = new JCheckBox();
        optMixinExport.setText("Mixin: Export classes");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optMixinExport, gbc);
        optMixinDebug = new JCheckBox();
        optMixinDebug.setText("Mixin: Debug");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optMixinDebug, gbc);
        optMixinCount = new JCheckBox();
        optMixinCount.setText("Mixin: Count injections");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optMixinCount, gbc);
        optFmlDebugAts = new JCheckBox();
        optFmlDebugAts.setText("FML: Debug Access Transformers");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(4, 0, 0, 0);
        panel2.add(optFmlDebugAts, gbc);
        buttonRun = new JButton();
        buttonRun.setText("Run");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        rootPanel.add(buttonRun, gbc);
        optHideOnFutureLaunches = new JCheckBox();
        optHideOnFutureLaunches.setSelected(true);
        optHideOnFutureLaunches.setText("Skip the settings window in the future");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        rootPanel.add(optHideOnFutureLaunches, gbc);
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(
            resultName,
            style >= 0 ? style : currentFont.getStyle(),
            size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "")
            .toLowerCase(Locale.ENGLISH)
            .startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize())
            : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
